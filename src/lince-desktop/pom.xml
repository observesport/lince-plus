<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.lince.observer</groupId>
        <artifactId>lince-plus-root</artifactId>
        <version>3.2.5</version>
        <relativePath>../pom.xml</relativePath>
    </parent>
    <artifactId>lince-desktop</artifactId>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <start-class>com.lince.observer.desktop.LinceAppFx</start-class>
<!--        <javafx.modulepath>${project.build.directory}/javafx-modules</javafx.modulepath>-->
    </properties>
    <profiles>
        <profile>
            <id>default</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <build>
                <plugins>
                    <!-- ... other plugins ... -->
                    <plugin>
                        <groupId>com.install4j</groupId>
                        <artifactId>install4j-maven</artifactId>
                        <version>${install4j.version}</version>
                        <executions>
                            <execution>
                                <id>compile-installers</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>compile</goal>
                                </goals>
                                <configuration>
                                    <projectFile>${project.basedir}/../installer/install4j/lince-plus-installer-v3.install4j
                                    </projectFile>
                                    <release>${project.version}</release>
                                    <destination>${project.basedir}/../installer</destination>
                                    <variables>
                                        <property>
                                            <name>version</name>
                                            <value>${project.version}</value>
                                        </property>
                                    </variables>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>local</id>
            <!-- This profile doesn't include the Install4j plugin -->
        </profile>
    </profiles>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-webflux</artifactId>
        </dependency>
        <!--        Jakarta is an option but check compatibilities-->
        <!--        https://docs.spring.io/spring-framework/reference/core/beans/standard-annotations.html#beans-standard-annotations-limitations-->
        <!--        <dependency>-->
        <!--            <groupId>jakarta.inject</groupId>-->
        <!--            <artifactId>jakarta.inject-api</artifactId>-->
        <!--        </dependency>-->
        <!--        Internal dependencies-->
        <dependency>
            <groupId>com.lince.observer</groupId>
            <artifactId>lince-data</artifactId>
        </dependency>
        <dependency>
            <groupId>com.lince.observer</groupId>
            <artifactId>lince-data-fx</artifactId>
        </dependency>
        <dependency>
            <groupId>com.lince.observer</groupId>
            <artifactId>lince-ai</artifactId>
        </dependency>
        <dependency>
            <groupId>com.lince.observer</groupId>
            <artifactId>lince-math</artifactId>
        </dependency>
        <dependency>
            <groupId>com.lince.observer</groupId>
            <artifactId>lince-transcoding</artifactId>
        </dependency>
        <!-- UNIT TESTING -->
        <!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- Mockito for mocking in tests -->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Mockito extension for JUnit Jupiter -->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.yaml/snakeyaml -->
        <dependency>
            <groupId>org.yaml</groupId>
            <artifactId>snakeyaml</artifactId>
        </dependency>
        <!-- https://mvnrepository.com/artifact/com.univocity/univocity-parsers -->
        <dependency>
            <groupId>com.univocity</groupId>
            <artifactId>univocity-parsers</artifactId>
        </dependency>
        <!-- Browser launcher -->
        <dependency>
            <groupId>edu.stanford.ejalbert</groupId>
            <artifactId>BrowserLauncher2</artifactId>
        </dependency>
        <!-- https://mvnrepository.com/artifact/com.google.zxing/core -->
        <dependency>
            <groupId>com.google.zxing</groupId>
            <artifactId>core</artifactId>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
        </dependency>
        <dependency>
            <groupId>org.fujion</groupId>
            <artifactId>fujion-highcharts</artifactId>
        </dependency>
        <!--        JavaFX inside jdk17-->
        <!-- https://mvnrepository.com/artifact/org.openjfx/javafx -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx</artifactId>
            <type>pom</type>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-base</artifactId>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-graphics</artifactId>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-swing</artifactId>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-media</artifactId>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.springdoc/springdoc-openapi-ui -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-ui</artifactId>
            <version>1.8.0</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
    </dependencies>

    <build>
        <finalName>lince-desktop</finalName>
        <outputDirectory>${project.build.directory}/classes</outputDirectory>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifest>
                            <mainClass>${start-class}</mainClass>
                        </manifest>
                        <manifestEntries>
                            <Add-Exports>javafx.graphics/com.sun.javafx.application=ALL-UNNAMED javafx.graphics/com.sun.glass.ui=ALL-UNNAMED</Add-Exports>
                            <Add-Opens>javafx.graphics/com.sun.glass.ui=ALL-UNNAMED</Add-Opens>
                        </manifestEntries>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>${javafx.maven.plugin.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <mainClass>${start-class}</mainClass>
<!--                    <mainClass>com.lince.observer.desktop.LinceApp</mainClass>-->
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>3.1.2</version>
                <configuration>
                    <!--                    <fork>true</fork>-->
                    <mainClass>${start-class}</mainClass>
<!--                    <mainClass>com.lince.observer.desktop.LinceAppFx</mainClass>-->
                    <layout>ZIP</layout>
<!--                    ,javafx.base,javafx.swing,javafx.graphics-->
                    <!--                        &#45;&#45;module-path ${javafx.modulepath}-->
                    <jvmArguments>
                        --add-opens=java.base/sun.nio.ch=ALL-UNNAMED
                        --add-opens=java.base/java.io=ALL-UNNAMED
                        --add-opens=javafx.base/com.sun.javafx.collections=ALL-UNNAMED
                        --add-opens=javafx.base/com.sun.javafx.collections=javafx.web
                        --add-opens=javafx.controls/javafx.scene.control=ALL-UNNAMED
                        --add-opens=javafx.controls/javafx.scene.control.skin=ALL-UNNAMED
                        --add-opens=javafx.graphics/javafx.scene.input=ALL-UNNAMED
                        --add-opens=javafx.web/javafx.scene.web=ALL-UNNAMED
                        --add-opens=javafx.web/com.sun.webkit=ALL-UNNAMED
                        --add-opens=javafx.controls/com.sun.javafx.scene.control.skin=ALL-UNNAMED
                        --add-exports=javafx.graphics/com.sun.javafx.application=ALL-UNNAMED
                        --add-exports=javafx.graphics/com.sun.glass.ui=ALL-UNNAMED
                        --add-opens=javafx.graphics/com.sun.glass.ui=ALL-UNNAMED
                        --add-modules=ALL-MODULE-PATH
                        --add-modules=javafx.controls,javafx.fxml,javafx.graphics,javafx.media,javafx.swing,javafx.web
                    </jvmArguments>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <!--                            <goal>run</goal>-->
                            <goal>repackage</goal>
                            <!-- This starts up the program from mvn:    <goal>start</goal>-->
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-jar</id>
                        <phase>package</phase>
                        <configuration>
                            <target>
                                <copy file="target/lince-desktop.jar"
                                      tofile="../installer/install4j/lince-desktop.jar"/>
                                <!--                                <copy file="target/${project.artifactId}-${project.version}.jar"-->
                                <!--                                      tofile="../${outputFolder}/${project.artifactId}.${outputExtension}"/>-->
                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- Maven Shade Plugin for creating an uber jar -->
            <!--            <plugin>-->
            <!--                <groupId>org.apache.maven.plugins</groupId>-->
            <!--                <artifactId>maven-shade-plugin</artifactId>-->
            <!--                <version>3.5.1</version>-->
            <!--                <executions>-->
            <!--                    <execution>-->
            <!--                        <phase>package</phase>-->
            <!--                        <goals>-->
            <!--                            <goal>shade</goal>-->
            <!--                        </goals>-->
            <!--&lt;!&ndash;                        <configuration>&ndash;&gt;-->
            <!--&lt;!&ndash;                            <transformers>&ndash;&gt;-->
            <!--&lt;!&ndash;                                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">&ndash;&gt;-->
            <!--&lt;!&ndash;                                    <mainClass>com.example.YourMainClass</mainClass>&ndash;&gt;-->
            <!--&lt;!&ndash;                                </transformer>&ndash;&gt;-->
            <!--&lt;!&ndash;                                <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>&ndash;&gt;-->
            <!--&lt;!&ndash;                            </transformers>&ndash;&gt;-->
            <!--&lt;!&ndash;                        </configuration>&ndash;&gt;-->
            <!--                    </execution>-->
            <!--                </executions>-->
            <!--            </plugin>-->
            <!-- Install4j Maven Plugin | https://www.ej-technologies.com/resources/install4j/help/doc/cli/maven.html -->
          <!--Moved to profile execution-->
           <!-- <plugin>
                <groupId>com.install4j</groupId>
                <artifactId>install4j-maven</artifactId>
                <version>${install4j.version}</version>
                <executions>
                    <execution>
                        <id>compile-installers</id>
                        <phase>install</phase>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                        <configuration>
                            <projectFile>${project.basedir}/../installer/install4j/lince-plus-installer-v3.install4j
                            </projectFile>
                            <release>${project.version}</release>
                            <destination>${project.basedir}/../installer</destination>
                            <variables>
                                <property>
                                    <name>version</name>
                                    <value>${project.version}</value>
                                </property>
                            </variables>
                        </configuration>
                    </execution>
                </executions>
            </plugin>-->
        </plugins>
        <resources>
            <!-- copy fxml and css resources -->
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.fxml</include>
                    <include>**/*.css</include>
                    <include>**/*.properties</include>
                </includes>
            </resource>
            <resource>
                <directory>src/test/java</directory>
                <includes>
                    <include>**/*.fxml</include>
                    <include>**/*.css</include>
                    <include>**/*.properties</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>**/*.properties</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.*</include>
                </includes>
                <excludes>
                    <exclude/>
                </excludes>
            </resource>
        </resources>
    </build>
</project>
