name: Java CI with Maven

on:
  push:
    branches:
      - '**'  # This will match any branch
  pull_request:
    branches:
      - '**'  # This will match any branch
#  push:
#    branches: [ main ]
#  pull_request:
#    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
      - name: Build with Maven
        run: mvn -B package install --file src/pom.xml
        env:
          INSTALL4J_LICENSE: ${{ secrets.INSTALL4J_LICENSE }}

      - name: Display output.txt
        run: |
          if [ -f src/installer/output.txt ]; then
            echo "Contents of output.txt:"
            cat src/installer/output.txt
          else
            echo "output.txt file not found in src/installer/"
          fi

      - name: Get version
        id: get_version
        run: echo ::set-output name=VERSION::$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout -f src/pom.xml)

      - name: Create Release Draft
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: true
          prerelease: false

      - name: Upload DMG Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./src/installer/lince-${{ steps.get_version.outputs.VERSION }}.dmg
          asset_name: lince-${{ steps.get_version.outputs.VERSION }}.dmg
          asset_content_type: application/x-apple-diskimage

      - name: Upload EXE Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./src/installer/lince-${{ steps.get_version.outputs.VERSION }}.exe
          asset_name: lince-${{ steps.get_version.outputs.VERSION }}.exe
          asset_content_type: application/vnd.microsoft.portable-executable

#      - name: Upload Release Asset
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: ./target/*.jar
#          asset_name: lince-${{ steps.get_version.outputs.VERSION }}.jar
#          asset_content_type: application/java-archive
